{"version":3,"sources":["src/CST.ts","src/scenes/LoadScene.ts","src/scenes/MenuScene.ts","src/CharacterSprite.ts","src/scenes/PlayScene.ts","src/main.ts"],"names":[],"mappings":"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","file":"main.89f0aa81.map","sourceRoot":"..","sourcesContent":["export const CST = {\r\n    SCENES: {\r\n        LOAD: \"LOAD\",\r\n        MENU: \"MENU\",\r\n        PLAY: \"PLAY\"\r\n    },\r\n    IMAGE: {\r\n        LOGO: \"logo.png\",\r\n        OPTIONS: \"options_button.png\",\r\n        PLAY: \"play_button.png\",\r\n        TITLE: \"title_bg.jpg\"\r\n    },\r\n    AUDIO: {\r\n        TITLE: \"shuinvy-childhood.mp3\"\r\n    },\r\n    SPRITE: {\r\n        CAT: \"cat.png\"\r\n    }\r\n}","import { CST } from \"../CST\";\r\nexport class LoadScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.LOAD\r\n        })\r\n    }\r\n    init() {\r\n\r\n    }\r\n    loadImages() {\r\n        this.load.setPath(\"./assets/image\");\r\n\r\n        for (let prop in CST.IMAGE) {\r\n            //@ts-ignore\r\n            this.load.image(CST.IMAGE[prop], CST.IMAGE[prop]);\r\n        }\r\n    }\r\n    loadAudio() {\r\n        this.load.setPath(\"./assets/audio\");\r\n\r\n        for (let prop in CST.AUDIO) {\r\n            //@ts-ignore\r\n            this.load.audio(CST.AUDIO[prop], CST.AUDIO[prop]);\r\n        }\r\n    }\r\n    loadSprites(frameConfig?: Phaser.Loader.FileTypes.ImageFrameConfig) {\r\n        this.load.setPath(\"./assets/sprite\");\r\n\r\n        for (let prop in CST.SPRITE) {\r\n            //@ts-ignore\r\n            this.load.spritesheet(CST.SPRITE[prop], CST.SPRITE[prop], frameConfig);\r\n        }\r\n    }\r\n    preload() {\r\n        this.load.spritesheet(\"anna\", \"./assets/sprite/anna.png\", {frameHeight: 64, frameWidth: 64});\r\n        //load atlases\r\n        this.load.atlas(\"characters\", \"./assets/sprite/characters.png\", \"./assets/sprite/characters.json\")\r\n        this.load.atlas(\"daze\", \"./assets/sprite/daze.png\", \"./assets/sprite/daze.json\")\r\n        this.load.spritesheet(\"rapier\", \"./assets/sprite/WEAPON_rapier.png\", {frameHeight: 192, frameWidth: 192});\r\n\r\n        //load image, spritesheet, sound\r\n        this.loadAudio();\r\n        this.loadSprites({\r\n            frameHeight: 32,\r\n            frameWidth: 32\r\n        });\r\n        this.loadImages();\r\n\r\n        //create loading bar\r\n\r\n        let loadingBar = this.add.graphics({\r\n            fillStyle: {\r\n                color: 0xffffff //white\r\n            }\r\n        })\r\n\r\n        /*\r\n        Loader Events:\r\n            complete - when done loading everything\r\n            progress - loader number progress in decimal\r\n        */\r\n\r\n        //simulate large load\r\n        /*\r\n        for(let i = 0; i < 100; i++){\r\n            this.load.spritesheet(\"cat\" + i, \"./assets/cat.png\", {\r\n                frameHeight: 32,\r\n                frameWidth: 32\r\n            });        \r\n        }*/\r\n\r\n        this.load.on(\"progress\", (percent: number) => {\r\n            loadingBar.fillRect(this.game.renderer.width / 2, 0, 50, this.game.renderer.height * percent);\r\n            console.log(percent);\r\n        })\r\n\r\n        this.load.on(\"complete\", () => {\r\n            //this.scene.start(CST.SCENES.MENU, \"hello from LoadScene\");\r\n        });\r\n\r\n        this.load.on(\"load\", (file: Phaser.Loader.File) => {\r\n            console.log(file.src)\r\n        })\r\n    }\r\n    create() {\r\n\r\n        this.scene.start(CST.SCENES.MENU);\r\n    }\r\n}","import { CST } from \"../CST\";\r\nexport class MenuScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: CST.SCENES.MENU\r\n        })\r\n    }\r\n    init() {\r\n    }\r\n    create() { //creating the menu screen\r\n\r\n        //create images (z order)\r\n\r\n        this.add.image(this.game.renderer.width / 2, this.game.renderer.height * 0.20, CST.IMAGE.LOGO).setDepth(1);\r\n\r\n        this.add.image(0, 0, CST.IMAGE.TITLE).setOrigin(0).setDepth(0);\r\n\r\n        let playButton = this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2, CST.IMAGE.PLAY).setDepth(1);\r\n\r\n        let optionsButton = this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2 + 100, CST.IMAGE.OPTIONS).setDepth(1);\r\n\r\n        //create sprites (if using pixel art, remove sharpen)\r\n\r\n        let hoverSprite: Phaser.GameObjects.Sprite = this.add.sprite(100, 100, CST.SPRITE.CAT);\r\n        hoverSprite.setScale(2);\r\n        hoverSprite.setVisible(false);\r\n\r\n        //create audio, disable pauseonblur\r\n\r\n        this.sound.pauseOnBlur = false;\r\n        //this.sound.play(CST.AUDIO.TITLE, {loop: true})\r\n\r\n        //create animation\r\n\r\n        this.anims.create({\r\n            key: \"walk\",\r\n            frameRate: 4,\r\n            repeat: -1, //repeat forever,\r\n            frames: this.anims.generateFrameNumbers(CST.SPRITE.CAT, {\r\n                frames: [0, 1, 2, 3]\r\n            })\r\n        });\r\n        //make image buttons interactive\r\n\r\n        /* \r\n            PointerEvents:\r\n                pointerover - hovering\r\n                pointerout - not hovering\r\n                pointerup - click and release\r\n                pointerdown - just click\r\n        */\r\n\r\n        playButton.setInteractive();\r\n\r\n        playButton.on(\"pointerover\", () => {\r\n            hoverSprite.setVisible(true);\r\n            hoverSprite.play(\"walk\");\r\n            hoverSprite.x = playButton.x - playButton.width;\r\n            hoverSprite.y = playButton.y;\r\n\r\n        })\r\n\r\n        playButton.on(\"pointerout\", () => {\r\n            hoverSprite.setVisible(false);\r\n        })\r\n\r\n        playButton.on(\"pointerup\", () => {\r\n            this.scene.start(CST.SCENES.PLAY);\r\n        })\r\n\r\n        optionsButton.setInteractive();\r\n\r\n        optionsButton.on(\"pointerover\", () => {\r\n            hoverSprite.setVisible(true);\r\n            hoverSprite.play(\"walk\");\r\n            hoverSprite.x = optionsButton.x - optionsButton.width;\r\n            hoverSprite.y = optionsButton.y;\r\n\r\n        })\r\n\r\n        optionsButton.on(\"pointerout\", () => {\r\n            hoverSprite.setVisible(false);\r\n        })\r\n\r\n        optionsButton.on(\"pointerup\", () => {\r\n            //this.scene.launch();\r\n        })\r\n\r\n    }\r\n}","export class CharacterSprite extends Phaser.Physics.Arcade.Sprite {\n    hp: number;\n\n    constructor(scene: Phaser.Scene, x: number, y: number, texture: string, frame?: string | number) {\n        super(scene, x, y, texture, frame);\n\n        scene.sys.updateList.add(this);\n        scene.sys.displayList.add(this);\n        this.setScale(2);\n        scene.physics.world.enableBody(this);\n        this.setImmovable(true);\n        this.hp = 10;\n    }\n}","import { CST } from \"../CST\";\nimport { CharacterSprite } from \"../CharacterSprite\";\nimport { Sprite } from \"../Sprite\";\n\nexport class PlayScene extends Phaser.Scene {\n    anna!: Phaser.Physics.Arcade.Sprite;\n    hooded!: Phaser.Physics.Arcade.Sprite;\n    keyboard!: { [index: string]: Phaser.Input.Keyboard.Key };\n    assassins!: Phaser.Physics.Arcade.Group;\n    fireAttacks!: Phaser.Physics.Arcade.Group;\n    player!: Phaser.GameObjects.Container;\n    constructor() {\n        super({\n            key: CST.SCENES.PLAY,\n        });\n    }\n    preload() {\n        this.anims.create({\n            key: \"left\",\n            frameRate: 10,\n            frames: this.anims.generateFrameNumbers(\"anna\", {\n                start: 9,\n                end: 17\n            })\n        });\n        this.anims.create({\n            key: \"down\",\n            frameRate: 10,\n            frames: this.anims.generateFrameNumbers(\"anna\", {\n                start: 18,\n                end: 26\n            })\n        });\n        this.anims.create({\n            key: \"up\",\n            frameRate: 10,\n            frames: this.anims.generateFrameNumbers(\"anna\", {\n                start: 0,\n                end: 8\n            })\n        });\n        this.anims.create({\n            key: \"right\",\n            frameRate: 10,\n            frames: this.anims.generateFrameNumbers(\"anna\", {\n                start: 27,\n                end: 35\n            })\n        });\n\n        this.anims.create({\n            key: \"blaze\",\n            duration: 50,\n            frames: this.anims.generateFrameNames(\"daze\", {\n                prefix: \"fire0\",\n                suffix: \".png\",\n                end: 55\n            }),\n            showOnStart: true,\n            hideOnComplete: true\n        });\n        this.textures.addSpriteSheetFromAtlas(\"hooded\", { frameHeight: 64, frameWidth: 64, atlas: \"characters\", frame: \"hooded\" })\n        this.textures.addSpriteSheetFromAtlas(\"mandy\", { frameHeight: 64, frameWidth: 64, atlas: \"characters\", frame: \"mandy\" });\n\n        this.load.image(\"terrain\", \"./assets/image/terrain_atlas.png\");\n        this.load.image(\"items\", \"./assets/image/items.png\");\n\n        this.load.tilemapTiledJSON(\"mappy\", \"./assets/maps/mappy.json\");\n\n\n        this.anims.create({\n            key: \"mandyswordleft\",\n            frameRate: 5,\n            frames: this.anims.generateFrameNumbers(\"mandy\", {\n                start: 169,\n                end: 174\n            })\n        });\n\n        this.anims.create({\n            key: \"sword_left\",\n            frameRate: 5,\n            frames: this.anims.generateFrameNumbers(\"rapier\", {\n                start: 6,\n                end: 11\n            }),\n            showOnStart: true,\n            hideOnComplete: true\n        });\n\n    }\n    create() {\n        this.player = this.add.container(200, 200, [this.add.sprite(0, 0, \"mandy\", 26), this.add.sprite(0,0, \"rapier\").setVisible(false)]).setDepth(1).setScale(2);\n        window.player = this.player;\n        \n        this.input.keyboard.on(\"keydown-F\", ()=>{\n            this.player.list[0].play(\"mandyswordleft\");\n            this.player.list[1].play(\"sword_left\");\n\n        })\n        \n        this.anna = new CharacterSprite(this, 400, 400, \"anna\", 26);\n        this.hooded = this.physics.add.sprite(200, 200, \"hooded\", 26).setScale(2).setImmovable(true);\n        this.fireAttacks = this.physics.add.group();\n        this.assassins = this.physics.add.group({ immovable: true });\n        this.assassins.add(this.hooded);\n        //this.physics.add.existing() manual add \n        window.hooded = this.hooded;\n        window.anna = this.anna;\n\n        //set smaller hitbox\n        this.anna.setSize(40, 50).setOffset(10, 10);\n        this.anna.setCollideWorldBounds(true);\n        this.keyboard = this.input.keyboard.addKeys(\"W, A, S, D\");\n        this.input.on(\"pointermove\", (pointer: Phaser.Input.Pointer) => {\n            if (pointer.isDown) { //is clicking\n                let fire = this.add.sprite(pointer.worldX, pointer.worldY, \"daze\", \"fire00.png\").play(\"blaze\");\n                this.fireAttacks.add(fire);\n                fire.on(\"animationcomplete\", () => {\n                    fire.destroy();\n                })\n            }\n        });\n\n        this.physics.world.addCollider(this.anna, this.assassins, (anna: CharacterSprite, hooded: Phaser.Physics.Arcade.Sprite) => {\n            anna.hp--;\n            if(anna.hp <= 0){\n                anna.destroy();\n            }\n            hooded.destroy();\n        });\n\n        this.physics.world.addCollider(this.fireAttacks, this.assassins, (fireAttacks: Phaser.Physics.Arcade.Sprite, hooded: Phaser.Physics.Arcade.Sprite) => {\n            fireAttacks.destroy();\n            hooded.destroy();\n\n            let x = 0;\n            let y = 0;\n            switch (Phaser.Math.Between(0, 1)) {\n                case 0: x = Phaser.Math.Between(0, this.game.renderer.width);\n                    break;\n                case 1: y = Phaser.Math.Between(0, this.game.renderer.height);\n            }\n            for (let i = 0; i < 2; i++) { //spawn 2\n                this.assassins.add(this.physics.add.sprite(x, y, \"hooded\", 26).setScale(2).setImmovable(true));\n            }\n        });\n\n        let mappy = this.add.tilemap(\"mappy\");\n\n        let terrain = mappy.addTilesetImage(\"terrain_atlas\", \"terrain\");\n        let itemset = mappy.addTilesetImage(\"items\");\n\n        //layers\n        let botLayer = mappy.createStaticLayer(\"bot\", [terrain], 0, 0).setDepth(-1);\n        let topLayer = mappy.createStaticLayer(\"top\", [terrain], 0, 0);\n\n        //map collisions\n        this.physics.add.collider(this.anna, topLayer);\n            //by tile property\n        topLayer.setCollisionByProperty({collides:true});\n\n            //by tile index\n        topLayer.setCollision([269,270,271,301,302,303,333,334,335])\n\n        //map events\n            //by location\n        topLayer.setTileLocationCallback(10, 8, 1, 1, ()=>{\n            alert(\"the sword calls to you!!!!\");\n\n            //@ts-ignore\n            topLayer.setTileLocationCallback(10, 8, 1, 1, null)\n        });\n\n            //by index\n        topLayer.setTileIndexCallback([272,273,274, 304,305,306, 336,337,338], ()=>{\n            console.log(\"STOP STEPPING ON LAVA >:(\")\n        });\n\n        //INTERACTIVE ITEMS FROM OBJECT LAYER\n        let items = mappy.createFromObjects(\"pickup\", 1114, {key: CST.SPRITE.CAT}).map((sprite: Phaser.GameObjects.Sprite)=>{\n            sprite.setScale(2);\n            sprite.setInteractive();\n        });\n\n        this.input.on(\"gameobjectdown\", (pointer: Phaser.Input.Pointer, obj: Phaser.GameObjects.Sprite)=> {\n            obj.destroy();\n        });\n\n        this.input.on(\"pointerdown\", (pointer: Phaser.Input.Pointer)=>{\n\n            //pixel position to tile position\n            let tile = mappy.getTileAt(mappy.worldToTileX(pointer.x), mappy.worldToTileY(pointer.y));\n\n            if(tile){\n                console.log(tile);\n            }\n        });\n\n        this.cameras.main.startFollow(this.anna);\n        this.physics.world.setBounds(0,0, mappy.widthInPixels, mappy.heightInPixels);\n\n        //draw debug render hitboxes\n\n        topLayer.renderDebug(this.add.graphics(),{\n            tileColor: null, //non-colliding tiles\n            collidingTileColor: new Phaser.Display.Color(243, 134, 48, 200), // Colliding tiles,\n            faceColor: new Phaser.Display.Color(40, 39, 37, 255) // Colliding face edges\n        })\n    }\n    update(time: number, delta: number) { //delta 16.666 @ 60fps\n\n        for (let i = 0; i < this.assassins.getChildren().length; i++) {\n            this.physics.accelerateToObject(this.assassins.getChildren()[i], this.anna);\n\n        }\n\n        if (this.anna.active === true) {\n            if (this.keyboard.D.isDown === true) {\n                this.anna.setVelocityX(128);\n\n            }\n\n            if (this.keyboard.W.isDown === true) {\n                this.anna.setVelocityY(-128);\n            }\n\n            if (this.keyboard.S.isDown === true) {\n                this.anna.setVelocityY(128);\n            }\n\n            if (this.keyboard.A.isDown === true) {\n                this.anna.setVelocityX(-128);\n            }\n            if (this.keyboard.A.isUp && this.keyboard.D.isUp) { //not moving on X axis\n                this.anna.setVelocityX(0);\n            }\n            if (this.keyboard.W.isUp && this.keyboard.S.isUp) { //not pressing y movement\n                this.anna.setVelocityY(0);\n            }\n\n            if (this.anna.body.velocity.x > 0) { //moving right\n                this.anna.play(\"right\", true);\n            } else if (this.anna.body.velocity.x < 0) { //moving left\n                this.anna.anims.playReverse(\"left\", true);\n            } else if (this.anna.body.velocity.y < 0) { //moving up\n                this.anna.play(\"up\", true);\n            } else if (this.anna.body.velocity.y > 0) { //moving down\n                this.anna.play(\"down\", true);\n            }\n        }\n\n    }\n}","/** @type {import(\"../typings/phaser\")} */\r\n\r\nimport { LoadScene } from \"./scenes/LoadScene\";\r\nimport { MenuScene } from \"./scenes/MenuScene\";\r\nimport { PlayScene } from \"./scenes/PlayScene\";\r\nlet game = new Phaser.Game({\r\n    width: 800,\r\n    height: 600,\r\n    scene: [\r\n        LoadScene, MenuScene, PlayScene\r\n    ],\r\n    render: {\r\n        pixelArt: true\r\n    },\r\n    physics: {\r\n        default: \"arcade\",\r\n        arcade: {\r\n            debug: true\r\n        }\r\n    },\r\n    scale: {\r\n        mode: Phaser.Scale.FIT,\r\n        autoCenter: Phaser.Scale.CENTER_BOTH\r\n    }\r\n});"]}